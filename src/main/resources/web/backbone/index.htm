<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <title>Â¡Palabras! - Backbone client</title>

    <link type="text/css" rel="stylesheet" href="css/main.css"/>

</head>
<body>


<div class="centered" id="main_div">

<div id="left">
<p>&nbsp;</p>
</div>

<div id="middle">


<table id="board">
<tr>
  <td class="triple_word"></td>
  <td></td>
  <td></td>
  <td class="double_letter"></td><td></td><td></td><td></td><td class="triple_word"></td><td></td><td></td><td></td><td  class="double_letter"></td><td></td><td></td><td class="triple_word"></td>
</tr>
<tr>
  <td></td>
  <td class="double_word"></td>
  <td></td>
  <td></td>
  <td></td>
  <td class="triple_letter"></td>
  <td></td>
  <td></td><td></td><td class="triple_letter"></td><td></td><td></td><td></td><td class="double_word"></td><td></td>
</tr>
<tr>
  <td></td><td></td><td class="double_word"></td><td></td><td></td><td></td><td class="double_letter"></td><td></td><td class="double_letter"></td><td></td><td></td><td></td><td class="double_word"></td><td></td><td></td>
</tr>
<tr>
  <td  class="double_letter"></td><td></td><td></td><td class="double_word"></td><td></td><td></td><td></td><td class="double_letter"></td><td></td><td></td><td></td><td class="double_word"> </td><td></td><td></td><td  class="double_letter"></td>
</tr>
<tr>
  <td></td><td class="occupied">P</td><td class="occupied">A</td><td class="occupied">L</td><td class="double_word occupied">A</td><td class="occupied">B</td><td class="occupied">R</td><td class="occupied">A</td><td class="occupied">S</td><td class=""></td><td class="double_word"> </td><td class=""></td><td></td><td></td><td></td>
</tr>
<tr>
  <td></td><td class="triple_letter"></td><td></td><td></td><td></td><td class="triple_letter"></td><td></td><td class="occupied">M</td><td></td><td class="triple_letter"></td><td></td><td class=""></td><td></td><td class="triple_letter"></td><td></td>
</tr>
<tr>
  <td></td><td></td><td class="double_letter"></td><td></td><td></td><td></td><td class="double_letter"></td><td class="occupied">O</td><td class="double_letter"></td><td></td><td></td><td class=""></td><td class="double_letter"></td><td></td><td></td>
</tr>
<tr>
  <td class="triple_word"></td><td></td><td></td><td class="double_letter"></td><td></td><td></td><td></td><td class="double_word occupied">N</td><td class=""></td><td class=""></td><td class=""></td><td class="double_letter"></td><td></td><td></td><td class="triple_word"></td>
</tr>
<tr>
  <td></td><td></td><td class="double_letter"></td><td></td><td class="occupied">A</td><td class="occupied">M</td><td class="double_letter occupied">I</td><td class="occupied">G</td><td class="double_letter occupied">O</td><td class="occupied">S</td><td class="occupied">!</td><td></td><td class="double_letter"></td><td></td><td></td>
</tr>
<tr>
  <td></td><td class="triple_letter"></td><td></td><td></td><td></td><td class="triple_letter"></td><td></td><td></td><td></td><td class="triple_letter"></td><td ></td><td></td><td></td><td class="triple_letter"></td><td></td>
</tr>
<tr>
  <td></td><td></td><td></td><td></td><td class="double_word"></td><td></td><td></td><td></td><td></td><td></td><td class="double_word"></td><td></td><td></td><td></td><td></td>
</tr>
<tr>
  <td  class="double_letter"></td><td></td><td></td><td class="double_word"></td><td></td><td></td><td></td><td class="double_letter"></td><td></td><td></td><td></td><td class="double_word"></td><td></td><td></td><td  class="double_letter"></td>
</tr>
<tr>
  <td></td><td></td><td class="double_word"></td><td></td><td></td><td></td><td class="double_letter"></td><td></td><td class="double_letter"></td><td></td><td></td><td></td><td class="double_word"></td><td></td><td></td>
</tr>
<tr>
  <td></td><td class="double_word"></td><td></td><td></td><td></td><td class="triple_letter"></td><td></td><td></td><td></td><td class="triple_letter"></td><td></td><td></td><td></td><td class="double_word"></td><td></td>
</tr>
<tr>
  <td class="triple_word"></td><td></td><td></td><td  class="double_letter"></td><td></td><td></td><td></td><td class="triple_word"></td><td></td><td></td><td></td><td  class="double_letter"></td><td></td><td></td><td class="triple_word"></td>
</tr>
</table>

<div id="player_move">

<p>Bienvenido! Please enter your email address: <input id="user_email"/> </p>

<p>Start a new game by entering your opponent's email: 
  <input id="opponent_email" />
  <button onclick="startNewGame()" id="start" style="margin-left:226px;">start new game</button></p>

<p>Or resume an existing game by entering <br />
  the game id: <input id="resume_game_id"/>
<button onclick="resumeGame()">resume game</button>
</p>




</div>

</div> <!-- CLOSE MIDDLE -->



<div id="right">
  <div id="scoreboard"></div>
</div>

</div><!-- close main -->


<script src="js/jquery-1.10.2.min.js" type="text/javascript"></script>
<script src="js/underscore-min.js" type="text/javascript"></script>
<script src="js/backbone-min.js" type="text/javascript"></script>

<script type="text/javascript">

//App
var Palabras = {
  Models: {},
  Collections: {},
  Views: {},
  Routers: {},
  initialize: function() {
    new ExampleApp.Routers.Tasks();
    Backbone.history.start();
  }
};


// Models
Palabras.Models.Player = Backbone.Model.extend();

Palabras.Models.BoardSpace = Backbone.Model.extend();

Palabras.Models.Board = Backbone.Model.extend();

Palabras.Models.Game = Backbone.Model.extend({
  urlRoot: "api/game"
});


//Views
Palabras.Views.ScoresView = Backbone.View.extend({
  id: "scoreboard",
  render: function(){
    header = "<h3>Scores:</h3>";
    this.$el.append(header);
    tbl = document.createElement("table");
    for (var i=0; i < this.model.get('players').length; i++){
      player = this.model.get('players')[i];
      tr = document.createElement("tr");
      td = document.createElement("td");
      td.innerHTML =  "Player " + (i + 1);     //player.name;
      tr.appendChild(td);
      score = document.createElement("td");
      score.innerHTML = player.score;
      tr.appendChild(score);
      tbl.appendChild(tr)
    }
    this.$el.append(tbl);
    this.$el.html();
  }
});


Palabras.Views.CurrentPlayerView = Backbone.View.extend({
  initialize: function(){
    this.currentPlayer = this.model.get('players')[this.model.get('currentTurn')];
    this.tiles = this.currentPlayer.tiles;
  },
  id: "player_move",
  events: {
    "click #shuffle_btn": "shuffleTiles",
    "click #move_btn": "submitMove",
    "keypress #move_input": "handleKeyPress"
  },

  handleKeyPress: function(e){
    if ( e.which == 13 ) //"return" key
      {
        this.submitMove();
      }
  },

  // send moveProposal eg: { "id": 1381106790975, "moveString": "H,8,>,HOG", "moveNumber": 1, "currentTurn": 0}
  submitMove: function(){
    moveString = $('#move_input').val(); 
    moveProposal = new Object();
    moveProposal.id = this.model.get('id');
    moveProposal.moveString = moveString;
    moveProposal.moveNumber = this.model.get('moves').length + 1;
    moveProposal.currentTurn = this.model.get('currentTurn');
    model = this.model; 
    $.ajax({
        url: "api/game/" + this.model.get('id') + "/move",
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(moveProposal),
        processData: false,
        dataType: 'json'
    }).done(function( data, status, xhr ) {
        if (xhr.responseJSON.errorMsg != null ){
          alert(xhr.responseJSON.errorMsg); 
        }
        fetchGameAndUpdate(model);
      });  
  },

  shuffleTiles: function(){
    tiles = this.tiles;
    for (var i=tiles.length-1; i > 0; i--){
      j = Math.floor((Math.random()*i)+0);
      tmp = tiles[j];
      tiles[j] = tiles[i];
      tiles[i] = tmp;
    }
    this.render();
  },

  render: function(){
    tiles = this.tiles;
    var rendered = "<h5>Player " + (this.model.get('currentTurn')+1) + ", it's your move:</h5>\n<table id='tile_rack'><tr>";
    for (var i=0; i < tiles.length; i++){
      rendered += "<td>" + tiles[i].character + "<sub>" + tiles[i].points + "</sub></td>";
    }
    rendered += "</tr></table>";
    rendered += "<button id='shuffle_btn'>Shuffle tiles</button>";
    rendered += "<input id='move_input'><button id='move_btn'>Submit move</button>";
    this.$el.html(rendered);
  }
});

Palabras.Views.BoardView = Backbone.View.extend({
  id: "board",
  tagName: "table",
  render: function(){
    n = this.model.spaces.length;   
    //guide row
    tr = document.createElement("tr");
    td = document.createElement("td");
    td.className = "guide corner";
    tr.appendChild(td);
    for (var i=1; i <= n; i++){
      td = document.createElement("td");
      td.className = "guide";
      td.innerHTML = i;
      tr.appendChild(td);
    }
    this.$el.append(tr)
    for (var i=0; i < n; i++) {
      tr = document.createElement("tr");
      td = document.createElement("td");
      td.className = "guide";
      td.innerHTML = String.fromCharCode(i + 65);
      tr.appendChild(td)
      for (var j=0; j < n; j++) {
        space = this.model.spaces[i][j];
        td = document.createElement("td");
        td.className = space.type;
        if (space.occupied) {
          td.innerHTML = space.value;
          td.className += (" occupied");
        }
        tr.appendChild(td);
      }
      this.$el.append(tr)
    }
    this.$el.html();
  }
});

//spaghetti
var appGame = new Object();


function startNewGame(){ 
  userEmail = $('#user_email').val(); 
  opponentEmail = $('#opponent_email').val(); 
  $.ajax({
    url: "api/game",
    type: 'POST',
    //contentType: 'application/json',
    //processData: false,
    data: { opponentEmail: opponentEmail, userEmail: userEmail }
  }).done(function( data, status, xhr ) {
    appGame = new Palabras.Models.Game({id:  xhr.responseJSON.id});
    fetchGameAndUpdate(appGame);
  });

};

function fetchGameAndUpdate(game) {
  game.fetch({

    success: function(){

      if (game.get('errorMsg') != null ){
        alert(game.get('errorMsg'));
      };

      currentPlayer = game.get('players')[game.get('currentTurn')];
      board = game.get('board');
      
      scores = new Palabras.Views.ScoresView({ model: game });
      boardView = new Palabras.Views.BoardView({ model: board });
      currentPlayerView = new Palabras.Views.CurrentPlayerView({ model: game });
      
      scores.render();
      currentPlayerView.render();
      boardView.render();

      $('#player_move').replaceWith(currentPlayerView.el);   
      $('#board').replaceWith(boardView.el);
      $('#scoreboard').replaceWith(scores.el);
      $("#move_input").focus();

    }
  })
};

</script>

</body>
</html>



















